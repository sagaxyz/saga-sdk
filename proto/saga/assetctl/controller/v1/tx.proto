syntax = "proto3";
package saga.assetctl.controller.v1; // Updated package name

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto"; // For cosmos.msg.v1.service
import "cosmos_proto/cosmos.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "saga/assetctl/controller/v1/assetctl.proto";

option go_package = "github.com/sagaxyz/saga-sdk/x/assetctl/controller/types";

// Msg defines the assetctl Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc ManageRegisteredAssets(MsgManageRegisteredAssets) returns (MsgManageRegisteredAssetsResponse);
  rpc ManageSupportedAssets(MsgManageSupportedAssets) returns (MsgManageSupportedAssetsResponse);
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}


message MsgManageRegisteredAssets {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // Signer (e.g., ICA address or Hub governance address)
  string channel_id = 2;
  repeated cosmos.bank.v1beta1.Metadata assets_to_register = 3 [(gogoproto.nullable) = false];
  repeated string assets_to_unregister = 4;
}

message MsgManageRegisteredAssetsResponse {}

message MsgManageSupportedAssets {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string channel_id = 2;
  repeated string add_ibc_denoms = 3;
  repeated string remove_ibc_denoms = 4;
}

message MsgManageSupportedAssetsResponse {
  repeated cosmos.bank.v1beta1.Metadata added_assets = 1 [(gogoproto.nullable) = false];
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2;
}

message MsgUpdateParamsResponse {}