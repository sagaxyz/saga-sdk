syntax = "proto3";
package saga.assetctl.controller.v1; // Updated package name

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto"; // For cosmos.msg.v1.service
import "cosmos_proto/cosmos.proto";
import "saga/assetctl/controller/v1/assetctl.proto";

option go_package = "github.com/sagaxyz/saga-sdk/x/assetctl/controller/types";

// Msg defines the assetctl Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc RegisterAssets(MsgRegisterAssets) returns (MsgRegisterAssetsResponse);
  rpc UnregisterAssets(MsgUnregisterAssets) returns (MsgUnregisterAssetsResponse);
  rpc ToggleChainletRegistry(MsgToggleChainletRegistry) returns (MsgToggleChainletRegistryResponse);
  rpc SupportAsset(MsgSupportAsset) returns (MsgSupportAssetResponse);
}

// AssetDetails defines the metadata for a single asset to be registered.
message AssetDetails {
  string denom = 1; // E.g., uatom, or an IBC hash on the source chain
  string display_name = 2;
  string description = 3;
  repeated DenomUnit denom_units = 4 [(gogoproto.nullable) = false];
  // string base = 5; // Base denom unit, e.g., uatom (can be derived from denom_units)
  // string display = 6; // Display denom unit, e.g., atom (can be derived from denom_units)
  // string name = 7; // Full asset name, e.g., Cosmos Hub Atom (can be same as display_name or derived)
  // string symbol = 8; // Asset symbol, e.g., ATOM (can be derived from denom_units or display_name)
}

message MsgRegisterAssets {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // Signer (e.g., ICA address or Hub governance address)
  repeated AssetDetails assets_to_register = 2 [(gogoproto.nullable) = false];
}

message MsgRegisterAssetsResponse {}

message MsgUnregisterAssets {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // Signer (e.g., ICA address or Hub governance address)
  repeated string ibc_denoms_to_unregister = 2;
}

message MsgUnregisterAssetsResponse {}

message MsgToggleChainletRegistry {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];     // Usually the ICA controller address for the chainlet or a designated chainlet admin account.
  string chainlet_id = 2; // The ID of the chainlet to toggle registry status for.
  bool enable = 3;        // True to enable, false to disable.
}

message MsgToggleChainletRegistryResponse {}

message MsgSupportAsset {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string ibc_denom = 2;
}

message MsgSupportAssetResponse {}