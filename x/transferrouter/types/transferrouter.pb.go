// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: saga/transferrouter/v1/transferrouter.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/04-channel/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the transferrouter module parameters.
type Params struct {
	// enabled specifies if the module functionality is turned on.
	Enabled                bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	KnownSignerPrivateKey  string `protobuf:"bytes,2,opt,name=known_signer_private_key,json=knownSignerPrivateKey,proto3" json:"known_signer_private_key,omitempty"`
	GatewayContractAddress string `protobuf:"bytes,3,opt,name=gateway_contract_address,json=gatewayContractAddress,proto3" json:"gateway_contract_address,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9de0c631bb4300f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Params) GetKnownSignerPrivateKey() string {
	if m != nil {
		return m.KnownSignerPrivateKey
	}
	return ""
}

func (m *Params) GetGatewayContractAddress() string {
	if m != nil {
		return m.GatewayContractAddress
	}
	return ""
}

type PacketQueueItem struct {
	Packet          *types.Packet `protobuf:"bytes,1,opt,name=packet,proto3" json:"packet,omitempty"`
	OriginalTxHash  []byte        `protobuf:"bytes,2,opt,name=original_tx_hash,json=originalTxHash,proto3" json:"original_tx_hash,omitempty"`
	IsTimeout       bool          `protobuf:"varint,3,opt,name=is_timeout,json=isTimeout,proto3" json:"is_timeout,omitempty"`
	Acknowledgement []byte        `protobuf:"bytes,4,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
}

func (m *PacketQueueItem) Reset()         { *m = PacketQueueItem{} }
func (m *PacketQueueItem) String() string { return proto.CompactTextString(m) }
func (*PacketQueueItem) ProtoMessage()    {}
func (*PacketQueueItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9de0c631bb4300f, []int{1}
}
func (m *PacketQueueItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketQueueItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketQueueItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketQueueItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketQueueItem.Merge(m, src)
}
func (m *PacketQueueItem) XXX_Size() int {
	return m.Size()
}
func (m *PacketQueueItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketQueueItem.DiscardUnknown(m)
}

var xxx_messageInfo_PacketQueueItem proto.InternalMessageInfo

func (m *PacketQueueItem) GetPacket() *types.Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *PacketQueueItem) GetOriginalTxHash() []byte {
	if m != nil {
		return m.OriginalTxHash
	}
	return nil
}

func (m *PacketQueueItem) GetIsTimeout() bool {
	if m != nil {
		return m.IsTimeout
	}
	return false
}

func (m *PacketQueueItem) GetAcknowledgement() []byte {
	if m != nil {
		return m.Acknowledgement
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "saga.transferrouter.v1.Params")
	proto.RegisterType((*PacketQueueItem)(nil), "saga.transferrouter.v1.PacketQueueItem")
}

func init() {
	proto.RegisterFile("saga/transferrouter/v1/transferrouter.proto", fileDescriptor_b9de0c631bb4300f)
}

var fileDescriptor_b9de0c631bb4300f = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xb1, 0x8e, 0xd4, 0x30,
	0x10, 0x86, 0xd7, 0x80, 0x96, 0x3b, 0x83, 0x38, 0x64, 0x89, 0x53, 0x04, 0x22, 0x3a, 0xae, 0x5a,
	0x09, 0x91, 0x68, 0xef, 0x0a, 0x68, 0x81, 0x06, 0x04, 0xc5, 0x12, 0xae, 0xa2, 0xb1, 0x26, 0xce,
	0x90, 0x58, 0x9b, 0xd8, 0x91, 0xed, 0xe4, 0x12, 0x9e, 0x82, 0x86, 0x87, 0xe1, 0x0d, 0x28, 0xb7,
	0xa4, 0x44, 0xbb, 0x2f, 0x82, 0xe2, 0x64, 0x9b, 0x54, 0x89, 0xff, 0x6f, 0x66, 0xf4, 0xff, 0xfa,
	0xe9, 0x4b, 0x0b, 0x39, 0xc4, 0xce, 0x80, 0xb2, 0xdf, 0xd1, 0x18, 0xdd, 0x38, 0x34, 0x71, 0xbb,
	0x9e, 0x29, 0x51, 0x6d, 0xb4, 0xd3, 0xec, 0x7c, 0x18, 0x8e, 0x66, 0xa8, 0x5d, 0x3f, 0x7d, 0x21,
	0x53, 0x11, 0x0b, 0x6d, 0x30, 0x16, 0x05, 0x28, 0x85, 0xe5, 0x70, 0x61, 0xfa, 0x1d, 0x57, 0x2f,
	0x7f, 0x11, 0xba, 0xdc, 0x80, 0x81, 0xca, 0xb2, 0x80, 0xde, 0x47, 0x05, 0x69, 0x89, 0x59, 0x40,
	0x2e, 0xc8, 0xea, 0x24, 0x39, 0x3e, 0xd9, 0x6b, 0x1a, 0x6c, 0x95, 0xbe, 0x55, 0xdc, 0xca, 0x5c,
	0xa1, 0xe1, 0xb5, 0x91, 0x2d, 0x38, 0xe4, 0x5b, 0xec, 0x83, 0x3b, 0x17, 0x64, 0x75, 0x9a, 0x3c,
	0xf1, 0xfc, 0xab, 0xc7, 0x9b, 0x91, 0x7e, 0xc2, 0x9e, 0xbd, 0xa1, 0x41, 0x0e, 0x0e, 0x6f, 0xa1,
	0xe7, 0x42, 0x2b, 0x67, 0x40, 0x38, 0x0e, 0x59, 0x66, 0xd0, 0xda, 0xe0, 0xae, 0x5f, 0x3c, 0x9f,
	0xf8, 0xfb, 0x09, 0xbf, 0x1d, 0xe9, 0xe5, 0x6f, 0x42, 0xcf, 0x36, 0x20, 0xb6, 0xe8, 0xbe, 0x34,
	0xd8, 0xe0, 0x47, 0x87, 0x15, 0xbb, 0xa6, 0xcb, 0xda, 0x4b, 0xde, 0xdf, 0x83, 0xab, 0x67, 0x91,
	0x4c, 0x45, 0x34, 0xe4, 0x8b, 0x8e, 0xa1, 0xda, 0x75, 0x34, 0x6e, 0x25, 0xd3, 0x28, 0x5b, 0xd1,
	0xc7, 0xda, 0xc8, 0x5c, 0x2a, 0x28, 0xb9, 0xeb, 0x78, 0x01, 0xb6, 0xf0, 0x9e, 0x1f, 0x26, 0x8f,
	0x8e, 0xfa, 0x4d, 0xf7, 0x01, 0x6c, 0xc1, 0x9e, 0x53, 0x2a, 0x2d, 0x77, 0xb2, 0x42, 0xdd, 0x38,
	0x6f, 0xef, 0x24, 0x39, 0x95, 0xf6, 0x66, 0x14, 0xd8, 0x8a, 0x9e, 0x81, 0x18, 0x62, 0x96, 0x98,
	0xe5, 0x58, 0xa1, 0x72, 0xc1, 0x3d, 0x7f, 0x67, 0x2e, 0xbf, 0xfb, 0xfc, 0x67, 0x1f, 0x92, 0xdd,
	0x3e, 0x24, 0xff, 0xf6, 0x21, 0xf9, 0x79, 0x08, 0x17, 0xbb, 0x43, 0xb8, 0xf8, 0x7b, 0x08, 0x17,
	0xdf, 0xae, 0x72, 0xe9, 0x8a, 0x26, 0x8d, 0x84, 0xae, 0xe2, 0xa1, 0xb3, 0xae, 0xff, 0xe1, 0xbf,
	0xaf, 0x6c, 0xb6, 0x8d, 0xbb, 0x79, 0xdd, 0xae, 0xaf, 0xd1, 0xa6, 0x4b, 0x5f, 0xd4, 0xf5, 0xff,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x7d, 0x24, 0x2a, 0x12, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewayContractAddress) > 0 {
		i -= len(m.GatewayContractAddress)
		copy(dAtA[i:], m.GatewayContractAddress)
		i = encodeVarintTransferrouter(dAtA, i, uint64(len(m.GatewayContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KnownSignerPrivateKey) > 0 {
		i -= len(m.KnownSignerPrivateKey)
		copy(dAtA[i:], m.KnownSignerPrivateKey)
		i = encodeVarintTransferrouter(dAtA, i, uint64(len(m.KnownSignerPrivateKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PacketQueueItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketQueueItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketQueueItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Acknowledgement) > 0 {
		i -= len(m.Acknowledgement)
		copy(dAtA[i:], m.Acknowledgement)
		i = encodeVarintTransferrouter(dAtA, i, uint64(len(m.Acknowledgement)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsTimeout {
		i--
		if m.IsTimeout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.OriginalTxHash) > 0 {
		i -= len(m.OriginalTxHash)
		copy(dAtA[i:], m.OriginalTxHash)
		i = encodeVarintTransferrouter(dAtA, i, uint64(len(m.OriginalTxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Packet != nil {
		{
			size, err := m.Packet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransferrouter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransferrouter(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransferrouter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.KnownSignerPrivateKey)
	if l > 0 {
		n += 1 + l + sovTransferrouter(uint64(l))
	}
	l = len(m.GatewayContractAddress)
	if l > 0 {
		n += 1 + l + sovTransferrouter(uint64(l))
	}
	return n
}

func (m *PacketQueueItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		l = m.Packet.Size()
		n += 1 + l + sovTransferrouter(uint64(l))
	}
	l = len(m.OriginalTxHash)
	if l > 0 {
		n += 1 + l + sovTransferrouter(uint64(l))
	}
	if m.IsTimeout {
		n += 2
	}
	l = len(m.Acknowledgement)
	if l > 0 {
		n += 1 + l + sovTransferrouter(uint64(l))
	}
	return n
}

func sovTransferrouter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransferrouter(x uint64) (n int) {
	return sovTransferrouter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransferrouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownSignerPrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransferrouter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransferrouter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KnownSignerPrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransferrouter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransferrouter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransferrouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransferrouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketQueueItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransferrouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketQueueItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketQueueItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransferrouter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransferrouter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Packet == nil {
				m.Packet = &types.Packet{}
			}
			if err := m.Packet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransferrouter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransferrouter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalTxHash = append(m.OriginalTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalTxHash == nil {
				m.OriginalTxHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTimeout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTimeout = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransferrouter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransferrouter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acknowledgement = append(m.Acknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.Acknowledgement == nil {
				m.Acknowledgement = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransferrouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransferrouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransferrouter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransferrouter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransferrouter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransferrouter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransferrouter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransferrouter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransferrouter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransferrouter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransferrouter = fmt.Errorf("proto: unexpected end of group")
)
