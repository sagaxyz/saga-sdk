// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: saga/chainlet/v1/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainletPacketData struct {
	// Types that are valid to be assigned to Packet:
	//
	//	*ChainletPacketData_NoData
	//	*ChainletPacketData_ConfirmUpgradePacket
	//	*ChainletPacketData_CreateUpgradePacket
	Packet isChainletPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *ChainletPacketData) Reset()         { *m = ChainletPacketData{} }
func (m *ChainletPacketData) String() string { return proto.CompactTextString(m) }
func (*ChainletPacketData) ProtoMessage()    {}
func (*ChainletPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed84d6c959cf7815, []int{0}
}
func (m *ChainletPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainletPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainletPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainletPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainletPacketData.Merge(m, src)
}
func (m *ChainletPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ChainletPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainletPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ChainletPacketData proto.InternalMessageInfo

type isChainletPacketData_Packet interface {
	isChainletPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChainletPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type ChainletPacketData_ConfirmUpgradePacket struct {
	ConfirmUpgradePacket *ConfirmUpgradePacketData `protobuf:"bytes,2,opt,name=confirmUpgradePacket,proto3,oneof" json:"confirmUpgradePacket,omitempty"`
}
type ChainletPacketData_CreateUpgradePacket struct {
	CreateUpgradePacket *CreateUpgradePacketData `protobuf:"bytes,3,opt,name=createUpgradePacket,proto3,oneof" json:"createUpgradePacket,omitempty"`
}

func (*ChainletPacketData_NoData) isChainletPacketData_Packet()               {}
func (*ChainletPacketData_ConfirmUpgradePacket) isChainletPacketData_Packet() {}
func (*ChainletPacketData_CreateUpgradePacket) isChainletPacketData_Packet()  {}

func (m *ChainletPacketData) GetPacket() isChainletPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *ChainletPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*ChainletPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *ChainletPacketData) GetConfirmUpgradePacket() *ConfirmUpgradePacketData {
	if x, ok := m.GetPacket().(*ChainletPacketData_ConfirmUpgradePacket); ok {
		return x.ConfirmUpgradePacket
	}
	return nil
}

func (m *ChainletPacketData) GetCreateUpgradePacket() *CreateUpgradePacketData {
	if x, ok := m.GetPacket().(*ChainletPacketData_CreateUpgradePacket); ok {
		return x.CreateUpgradePacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChainletPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChainletPacketData_NoData)(nil),
		(*ChainletPacketData_ConfirmUpgradePacket)(nil),
		(*ChainletPacketData_CreateUpgradePacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed84d6c959cf7815, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// ConfirmUpgradePacketData defines a struct for the packet payload
type ConfirmUpgradePacketData struct {
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Plan    string `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *ConfirmUpgradePacketData) Reset()         { *m = ConfirmUpgradePacketData{} }
func (m *ConfirmUpgradePacketData) String() string { return proto.CompactTextString(m) }
func (*ConfirmUpgradePacketData) ProtoMessage()    {}
func (*ConfirmUpgradePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed84d6c959cf7815, []int{2}
}
func (m *ConfirmUpgradePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmUpgradePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmUpgradePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmUpgradePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmUpgradePacketData.Merge(m, src)
}
func (m *ConfirmUpgradePacketData) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmUpgradePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmUpgradePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmUpgradePacketData proto.InternalMessageInfo

func (m *ConfirmUpgradePacketData) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ConfirmUpgradePacketData) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ConfirmUpgradePacketData) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

// ConfirmUpgradePacketAck defines a struct for the packet acknowledgment
type ConfirmUpgradePacketAck struct {
}

func (m *ConfirmUpgradePacketAck) Reset()         { *m = ConfirmUpgradePacketAck{} }
func (m *ConfirmUpgradePacketAck) String() string { return proto.CompactTextString(m) }
func (*ConfirmUpgradePacketAck) ProtoMessage()    {}
func (*ConfirmUpgradePacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed84d6c959cf7815, []int{3}
}
func (m *ConfirmUpgradePacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmUpgradePacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmUpgradePacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmUpgradePacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmUpgradePacketAck.Merge(m, src)
}
func (m *ConfirmUpgradePacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmUpgradePacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmUpgradePacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmUpgradePacketAck proto.InternalMessageInfo

// CreateUpgradePacketData defines a struct for the packet payload
type CreateUpgradePacketData struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Info   string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *CreateUpgradePacketData) Reset()         { *m = CreateUpgradePacketData{} }
func (m *CreateUpgradePacketData) String() string { return proto.CompactTextString(m) }
func (*CreateUpgradePacketData) ProtoMessage()    {}
func (*CreateUpgradePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed84d6c959cf7815, []int{4}
}
func (m *CreateUpgradePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUpgradePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUpgradePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUpgradePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUpgradePacketData.Merge(m, src)
}
func (m *CreateUpgradePacketData) XXX_Size() int {
	return m.Size()
}
func (m *CreateUpgradePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUpgradePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUpgradePacketData proto.InternalMessageInfo

func (m *CreateUpgradePacketData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUpgradePacketData) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CreateUpgradePacketData) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// UpgradePacketAck defines a struct for the packet acknowledgment
type CreateUpgradePacketAck struct {
}

func (m *CreateUpgradePacketAck) Reset()         { *m = CreateUpgradePacketAck{} }
func (m *CreateUpgradePacketAck) String() string { return proto.CompactTextString(m) }
func (*CreateUpgradePacketAck) ProtoMessage()    {}
func (*CreateUpgradePacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed84d6c959cf7815, []int{5}
}
func (m *CreateUpgradePacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUpgradePacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUpgradePacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUpgradePacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUpgradePacketAck.Merge(m, src)
}
func (m *CreateUpgradePacketAck) XXX_Size() int {
	return m.Size()
}
func (m *CreateUpgradePacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUpgradePacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUpgradePacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ChainletPacketData)(nil), "saga.chainlet.v1.ChainletPacketData")
	proto.RegisterType((*NoData)(nil), "saga.chainlet.v1.NoData")
	proto.RegisterType((*ConfirmUpgradePacketData)(nil), "saga.chainlet.v1.ConfirmUpgradePacketData")
	proto.RegisterType((*ConfirmUpgradePacketAck)(nil), "saga.chainlet.v1.ConfirmUpgradePacketAck")
	proto.RegisterType((*CreateUpgradePacketData)(nil), "saga.chainlet.v1.CreateUpgradePacketData")
	proto.RegisterType((*CreateUpgradePacketAck)(nil), "saga.chainlet.v1.CreateUpgradePacketAck")
}

func init() { proto.RegisterFile("saga/chainlet/v1/packet.proto", fileDescriptor_ed84d6c959cf7815) }

var fileDescriptor_ed84d6c959cf7815 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0x80, 0x93, 0xfe, 0x25, 0x7f, 0x3b, 0x5e, 0x64, 0x95, 0x36, 0x1e, 0x0c, 0x92, 0x93, 0x8a,
	0x26, 0xb4, 0x3e, 0x41, 0x5b, 0x11, 0xbd, 0x88, 0x04, 0x3c, 0x28, 0x08, 0xdd, 0x6e, 0xb7, 0x49,
	0x48, 0xbb, 0x1b, 0xd2, 0xb5, 0xb4, 0x3e, 0x85, 0xe0, 0x4b, 0x79, 0xec, 0xd1, 0xa3, 0xb4, 0x2f,
	0x22, 0xd9, 0x6c, 0x10, 0xed, 0xd6, 0x53, 0x66, 0x98, 0xc9, 0xf7, 0xed, 0x0c, 0x03, 0x87, 0x53,
	0x1c, 0x62, 0x9f, 0x44, 0x38, 0x66, 0x63, 0x2a, 0xfc, 0x59, 0xcb, 0x4f, 0x31, 0x49, 0xa8, 0xf0,
	0xd2, 0x8c, 0x0b, 0x8e, 0x76, 0xf3, 0xb2, 0x57, 0x96, 0xbd, 0x59, 0xcb, 0x7d, 0xab, 0x00, 0xea,
	0xa9, 0xfc, 0x4e, 0xb6, 0x5e, 0x62, 0x81, 0x51, 0x1b, 0x2c, 0xc6, 0xf3, 0xc8, 0x36, 0x8f, 0xcc,
	0xe3, 0x9d, 0xb6, 0xed, 0xfd, 0xfe, 0xd3, 0xbb, 0x95, 0xf5, 0x6b, 0x23, 0x50, 0x9d, 0xa8, 0x0f,
	0xfb, 0x84, 0xb3, 0x51, 0x9c, 0x4d, 0xee, 0xd3, 0x30, 0xc3, 0x43, 0x5a, 0xf0, 0xec, 0x8a, 0x24,
	0x9c, 0x6e, 0x12, 0x7a, 0x9a, 0x6e, 0xc5, 0xd4, 0x92, 0xd0, 0x13, 0xec, 0x91, 0x8c, 0x62, 0x41,
	0x7f, 0x0a, 0xfe, 0x49, 0xc1, 0x89, 0x46, 0xb0, 0xd9, 0xac, 0xf8, 0x3a, 0x4e, 0xb7, 0x06, 0x56,
	0xb1, 0x2d, 0xb7, 0x06, 0x56, 0x31, 0x9e, 0xdb, 0x07, 0x7b, 0xdb, 0x33, 0x91, 0x0d, 0xff, 0xa5,
	0xed, 0x66, 0x28, 0xb7, 0x54, 0x0f, 0xca, 0x14, 0x35, 0xc0, 0x8a, 0x68, 0x1c, 0x46, 0xc5, 0xf0,
	0xd5, 0x40, 0x65, 0x08, 0x41, 0x35, 0x1d, 0x63, 0x26, 0x5f, 0x5c, 0x0f, 0x64, 0xec, 0x1e, 0x40,
	0x53, 0x67, 0xe8, 0x90, 0xc4, 0x7d, 0x80, 0xe6, 0x96, 0x11, 0x72, 0x12, 0xc3, 0x13, 0xaa, 0xc4,
	0x32, 0xfe, 0xcb, 0x1a, 0xb3, 0x11, 0x2f, 0xad, 0x79, 0xec, 0xda, 0xd0, 0xd0, 0xa0, 0x3b, 0x24,
	0xe9, 0x5e, 0xbd, 0xaf, 0x1c, 0x73, 0xb9, 0x72, 0xcc, 0xcf, 0x95, 0x63, 0xbe, 0xae, 0x1d, 0x63,
	0xb9, 0x76, 0x8c, 0x8f, 0xb5, 0x63, 0x3c, 0x9e, 0x85, 0xb1, 0x88, 0x9e, 0x07, 0x1e, 0xe1, 0x13,
	0x3f, 0xdf, 0xf5, 0x7c, 0xf1, 0x22, 0xbf, 0xe7, 0xd3, 0x61, 0xe2, 0xcf, 0xbf, 0xaf, 0x4e, 0x2c,
	0x52, 0x3a, 0x1d, 0x58, 0xf2, 0xe4, 0x2e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xe4, 0x2b,
	0x4d, 0x93, 0x02, 0x00, 0x00,
}

func (m *ChainletPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainletPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainletPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ChainletPacketData_ConfirmUpgradePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletPacketData_ConfirmUpgradePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfirmUpgradePacket != nil {
		{
			size, err := m.ConfirmUpgradePacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChainletPacketData_CreateUpgradePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletPacketData_CreateUpgradePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateUpgradePacket != nil {
		{
			size, err := m.CreateUpgradePacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConfirmUpgradePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmUpgradePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmUpgradePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Plan) > 0 {
		i -= len(m.Plan)
		copy(dAtA[i:], m.Plan)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Plan)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmUpgradePacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmUpgradePacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmUpgradePacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateUpgradePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUpgradePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUpgradePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUpgradePacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUpgradePacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUpgradePacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainletPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *ChainletPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *ChainletPacketData_ConfirmUpgradePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfirmUpgradePacket != nil {
		l = m.ConfirmUpgradePacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *ChainletPacketData_CreateUpgradePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateUpgradePacket != nil {
		l = m.CreateUpgradePacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConfirmUpgradePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovPacket(uint64(m.Height))
	}
	l = len(m.Plan)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ConfirmUpgradePacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateUpgradePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovPacket(uint64(m.Height))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *CreateUpgradePacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainletPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainletPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainletPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &ChainletPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmUpgradePacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfirmUpgradePacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &ChainletPacketData_ConfirmUpgradePacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateUpgradePacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateUpgradePacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &ChainletPacketData_CreateUpgradePacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmUpgradePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmUpgradePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmUpgradePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmUpgradePacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmUpgradePacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmUpgradePacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUpgradePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUpgradePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUpgradePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUpgradePacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUpgradePacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUpgradePacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
