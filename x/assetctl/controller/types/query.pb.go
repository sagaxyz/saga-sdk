// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: saga/assetctl/controller/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryAssetDirectoryRequest is the request type for the Query/AssetDirectory RPC method.
type QueryAssetDirectoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAssetDirectoryRequest) Reset()         { *m = QueryAssetDirectoryRequest{} }
func (m *QueryAssetDirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetDirectoryRequest) ProtoMessage()    {}
func (*QueryAssetDirectoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26069c4b7c33449d, []int{0}
}
func (m *QueryAssetDirectoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetDirectoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetDirectoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetDirectoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetDirectoryRequest.Merge(m, src)
}
func (m *QueryAssetDirectoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetDirectoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetDirectoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetDirectoryRequest proto.InternalMessageInfo

func (m *QueryAssetDirectoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAssetDirectoryResponse is the response type for the Query/AssetDirectory RPC method.
type QueryAssetDirectoryResponse struct {
	Assets     []RegisteredAsset   `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAssetDirectoryResponse) Reset()         { *m = QueryAssetDirectoryResponse{} }
func (m *QueryAssetDirectoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetDirectoryResponse) ProtoMessage()    {}
func (*QueryAssetDirectoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26069c4b7c33449d, []int{1}
}
func (m *QueryAssetDirectoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetDirectoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetDirectoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetDirectoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetDirectoryResponse.Merge(m, src)
}
func (m *QueryAssetDirectoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetDirectoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetDirectoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetDirectoryResponse proto.InternalMessageInfo

func (m *QueryAssetDirectoryResponse) GetAssets() []RegisteredAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *QueryAssetDirectoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChainletRegistryStatusRequest struct {
	ChainletId string `protobuf:"bytes,1,opt,name=chainlet_id,json=chainletId,proto3" json:"chainlet_id,omitempty"`
}

func (m *QueryChainletRegistryStatusRequest) Reset()         { *m = QueryChainletRegistryStatusRequest{} }
func (m *QueryChainletRegistryStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainletRegistryStatusRequest) ProtoMessage()    {}
func (*QueryChainletRegistryStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26069c4b7c33449d, []int{2}
}
func (m *QueryChainletRegistryStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainletRegistryStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainletRegistryStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainletRegistryStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainletRegistryStatusRequest.Merge(m, src)
}
func (m *QueryChainletRegistryStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainletRegistryStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainletRegistryStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainletRegistryStatusRequest proto.InternalMessageInfo

func (m *QueryChainletRegistryStatusRequest) GetChainletId() string {
	if m != nil {
		return m.ChainletId
	}
	return ""
}

type QueryChainletRegistryStatusResponse struct {
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
}

func (m *QueryChainletRegistryStatusResponse) Reset()         { *m = QueryChainletRegistryStatusResponse{} }
func (m *QueryChainletRegistryStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainletRegistryStatusResponse) ProtoMessage()    {}
func (*QueryChainletRegistryStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26069c4b7c33449d, []int{3}
}
func (m *QueryChainletRegistryStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainletRegistryStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainletRegistryStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainletRegistryStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainletRegistryStatusResponse.Merge(m, src)
}
func (m *QueryChainletRegistryStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainletRegistryStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainletRegistryStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainletRegistryStatusResponse proto.InternalMessageInfo

func (m *QueryChainletRegistryStatusResponse) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

// RegisteredAsset defines the structure of an asset in the directory.
type RegisteredAsset struct {
	IbcDenom      string      `protobuf:"bytes,1,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
	OriginalDenom string      `protobuf:"bytes,2,opt,name=original_denom,json=originalDenom,proto3" json:"original_denom,omitempty"`
	DisplayName   string      `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description   string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DenomUnits    []DenomUnit `protobuf:"bytes,5,rep,name=denom_units,json=denomUnits,proto3" json:"denom_units"`
}

func (m *RegisteredAsset) Reset()         { *m = RegisteredAsset{} }
func (m *RegisteredAsset) String() string { return proto.CompactTextString(m) }
func (*RegisteredAsset) ProtoMessage()    {}
func (*RegisteredAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_26069c4b7c33449d, []int{4}
}
func (m *RegisteredAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredAsset.Merge(m, src)
}
func (m *RegisteredAsset) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredAsset.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredAsset proto.InternalMessageInfo

func (m *RegisteredAsset) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

func (m *RegisteredAsset) GetOriginalDenom() string {
	if m != nil {
		return m.OriginalDenom
	}
	return ""
}

func (m *RegisteredAsset) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RegisteredAsset) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RegisteredAsset) GetDenomUnits() []DenomUnit {
	if m != nil {
		return m.DenomUnits
	}
	return nil
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26069c4b7c33449d, []int{5}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26069c4b7c33449d, []int{6}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAssetDirectoryRequest)(nil), "saga.assetctl.controller.v1.QueryAssetDirectoryRequest")
	proto.RegisterType((*QueryAssetDirectoryResponse)(nil), "saga.assetctl.controller.v1.QueryAssetDirectoryResponse")
	proto.RegisterType((*QueryChainletRegistryStatusRequest)(nil), "saga.assetctl.controller.v1.QueryChainletRegistryStatusRequest")
	proto.RegisterType((*QueryChainletRegistryStatusResponse)(nil), "saga.assetctl.controller.v1.QueryChainletRegistryStatusResponse")
	proto.RegisterType((*RegisteredAsset)(nil), "saga.assetctl.controller.v1.RegisteredAsset")
	proto.RegisterType((*QueryParamsRequest)(nil), "saga.assetctl.controller.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "saga.assetctl.controller.v1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("saga/assetctl/controller/v1/query.proto", fileDescriptor_26069c4b7c33449d)
}

var fileDescriptor_26069c4b7c33449d = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xde, 0xf2, 0x67, 0x03, 0xef, 0xfe, 0x7e, 0x98, 0x8c, 0xc4, 0x6c, 0x8a, 0x2e, 0x4b, 0x89,
	0x80, 0x46, 0x3b, 0x2e, 0x1e, 0x30, 0xf1, 0xa0, 0x22, 0x68, 0x34, 0xd1, 0x40, 0x8d, 0x17, 0x2f,
	0x9b, 0x69, 0x3b, 0x29, 0x13, 0xdb, 0x99, 0xd2, 0x99, 0x25, 0xac, 0xc6, 0x8b, 0x77, 0x13, 0x13,
	0x3f, 0x80, 0xdf, 0xc0, 0x83, 0x9f, 0x82, 0x23, 0x89, 0x1e, 0x3c, 0x19, 0x03, 0x5e, 0xfc, 0x16,
	0xa6, 0xd3, 0x29, 0xb0, 0x82, 0x45, 0x3d, 0xed, 0xee, 0xb3, 0xcf, 0xf3, 0xbc, 0xcf, 0xfb, 0xce,
	0x3b, 0x03, 0xf3, 0x92, 0x44, 0x04, 0x13, 0x29, 0xa9, 0x0a, 0x54, 0x8c, 0x03, 0xc1, 0x55, 0x26,
	0xe2, 0x98, 0x66, 0x78, 0xab, 0x83, 0x37, 0x7b, 0x34, 0xeb, 0xbb, 0x69, 0x26, 0x94, 0x40, 0x53,
	0x39, 0xd1, 0x2d, 0x89, 0xee, 0x21, 0xd1, 0xdd, 0xea, 0xd8, 0x93, 0x91, 0x88, 0x84, 0xe6, 0xe1,
	0xfc, 0x5b, 0x21, 0xb1, 0xcf, 0x47, 0x42, 0x44, 0x31, 0xc5, 0x24, 0x65, 0x98, 0x70, 0x2e, 0x14,
	0x51, 0x4c, 0x70, 0x69, 0xfe, 0xbd, 0x1c, 0x08, 0x99, 0x08, 0x89, 0x7d, 0x22, 0x69, 0x51, 0x09,
	0x6f, 0x75, 0x7c, 0xaa, 0x48, 0x07, 0xa7, 0x24, 0x62, 0x5c, 0x93, 0x4b, 0x6e, 0x55, 0xca, 0x83,
	0x4c, 0x9a, 0xeb, 0x84, 0x60, 0xaf, 0xe7, 0x6e, 0x77, 0x72, 0x78, 0x85, 0x65, 0x34, 0x50, 0x22,
	0xeb, 0x7b, 0x74, 0xb3, 0x47, 0xa5, 0x42, 0xf7, 0x00, 0x0e, 0xdd, 0x9b, 0x56, 0xdb, 0x5a, 0x68,
	0x2c, 0xce, 0xb9, 0x45, 0x14, 0x37, 0x8f, 0xe2, 0x16, 0x4d, 0x9b, 0x28, 0xee, 0x1a, 0x89, 0xa8,
	0xd1, 0x7a, 0x47, 0x94, 0xce, 0x47, 0x0b, 0xa6, 0x4e, 0x2c, 0x23, 0x53, 0xc1, 0x25, 0x45, 0x0f,
	0xa1, 0xae, 0x73, 0xc9, 0xa6, 0xd5, 0x1e, 0x5e, 0x68, 0x2c, 0x5e, 0x71, 0x2b, 0xe6, 0xe7, 0x7a,
	0x34, 0x62, 0x52, 0xd1, 0x8c, 0x86, 0xda, 0x6e, 0x79, 0x64, 0xe7, 0xeb, 0x74, 0xcd, 0x33, 0x0e,
	0xe8, 0xfe, 0x40, 0xe6, 0x21, 0x9d, 0x79, 0xfe, 0xd4, 0xcc, 0x45, 0x90, 0x81, 0xd0, 0xab, 0xe0,
	0xe8, 0xcc, 0x77, 0x37, 0x08, 0xe3, 0x31, 0x55, 0x45, 0xd9, 0xac, 0xff, 0x44, 0x11, 0xd5, 0x93,
	0xe5, 0x88, 0xa6, 0xa1, 0x11, 0x18, 0x42, 0x97, 0x85, 0x7a, 0x46, 0xe3, 0x1e, 0x94, 0xd0, 0x83,
	0xd0, 0x59, 0x81, 0xd9, 0x4a, 0x1b, 0x33, 0x82, 0x0b, 0x00, 0x4c, 0x76, 0x29, 0x27, 0x7e, 0x4c,
	0x0b, 0x9b, 0x31, 0x6f, 0x9c, 0xc9, 0xd5, 0x02, 0x70, 0x7e, 0x58, 0x70, 0xe6, 0x97, 0xbe, 0xd1,
	0x14, 0x8c, 0x33, 0x3f, 0xe8, 0x86, 0x94, 0x8b, 0xc4, 0x14, 0x1e, 0x63, 0x7e, 0xb0, 0x92, 0xff,
	0x46, 0x17, 0x61, 0x42, 0x64, 0x2c, 0x6f, 0x26, 0x36, 0x8c, 0x21, 0xcd, 0xf8, 0xbf, 0x44, 0x0b,
	0xda, 0x0c, 0xfc, 0x17, 0x32, 0x99, 0xc6, 0xa4, 0xdf, 0xe5, 0x24, 0xa1, 0xcd, 0x61, 0x4d, 0x6a,
	0x18, 0xec, 0x31, 0x49, 0x28, 0x6a, 0x43, 0x23, 0xa4, 0x32, 0xc8, 0x58, 0xaa, 0x27, 0x3a, 0x62,
	0x18, 0x87, 0x10, 0x7a, 0x94, 0x33, 0xb8, 0x48, 0xba, 0x3d, 0xce, 0x94, 0x6c, 0x8e, 0xea, 0x33,
	0x9c, 0xab, 0x3c, 0x43, 0x5d, 0xfd, 0x29, 0x67, 0xe5, 0xe9, 0x41, 0x58, 0x02, 0xd2, 0x99, 0x04,
	0xa4, 0x27, 0xb6, 0x46, 0x32, 0x92, 0x94, 0x83, 0x76, 0x3c, 0x38, 0x3b, 0x80, 0x9a, 0xb9, 0xdd,
	0x84, 0x7a, 0xaa, 0x11, 0xb3, 0x9e, 0xb3, 0x95, 0x65, 0x8d, 0xd8, 0x48, 0x16, 0xdf, 0x8f, 0xc0,
	0xa8, 0x36, 0x45, 0x1f, 0x2c, 0x98, 0x18, 0x5c, 0x4e, 0xb4, 0x54, 0xe9, 0xf4, 0xfb, 0x5b, 0x63,
	0xdf, 0xf8, 0x7b, 0x61, 0xd1, 0x8c, 0x73, 0xe9, 0xf5, 0xa7, 0xef, 0xef, 0x86, 0x66, 0xd1, 0x0c,
	0x1e, 0xbc, 0xc2, 0xe5, 0xbd, 0xed, 0x86, 0x07, 0xe9, 0x3e, 0x5b, 0x70, 0xee, 0xe4, 0x95, 0x42,
	0xb7, 0x4e, 0xaf, 0x5f, 0xb9, 0xd3, 0xf6, 0xed, 0x7f, 0x37, 0x30, 0x8d, 0x2c, 0xe9, 0x46, 0x3a,
	0x08, 0x1f, 0x6f, 0xe4, 0xe0, 0xb6, 0x48, 0x2d, 0xc1, 0x2f, 0x8f, 0x5c, 0x9f, 0x57, 0xe8, 0x8d,
	0x05, 0xf5, 0xe2, 0x90, 0x10, 0x3e, 0x3d, 0xc5, 0xc0, 0x86, 0xd8, 0xd7, 0xfe, 0x5c, 0x60, 0x62,
	0xb6, 0x75, 0x4c, 0x1b, 0x35, 0x8f, 0xc7, 0x2c, 0x36, 0x64, 0x79, 0x7d, 0x67, 0xaf, 0x65, 0xed,
	0xee, 0xb5, 0xac, 0x6f, 0x7b, 0x2d, 0xeb, 0xed, 0x7e, 0xab, 0xb6, 0xbb, 0xdf, 0xaa, 0x7d, 0xd9,
	0x6f, 0xd5, 0x9e, 0x2d, 0x45, 0x4c, 0x6d, 0xf4, 0x7c, 0x37, 0x10, 0x89, 0x56, 0x6f, 0xf7, 0x5f,
	0xe8, 0xcf, 0xab, 0x32, 0x7c, 0x8e, 0xb7, 0x4f, 0x7c, 0x7e, 0x55, 0x3f, 0xa5, 0xd2, 0xaf, 0xeb,
	0x97, 0xf7, 0xfa, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x74, 0x12, 0x6c, 0x4d, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// AssetDirectory queries the list of all registered assets on the Hub.
	AssetDirectory(ctx context.Context, in *QueryAssetDirectoryRequest, opts ...grpc.CallOption) (*QueryAssetDirectoryResponse, error)
	// ChainletRegistryStatus queries if the asset registry is enabled for a specific chainlet.
	ChainletRegistryStatus(ctx context.Context, in *QueryChainletRegistryStatusRequest, opts ...grpc.CallOption) (*QueryChainletRegistryStatusResponse, error)
	// Params queries the controller module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AssetDirectory(ctx context.Context, in *QueryAssetDirectoryRequest, opts ...grpc.CallOption) (*QueryAssetDirectoryResponse, error) {
	out := new(QueryAssetDirectoryResponse)
	err := c.cc.Invoke(ctx, "/saga.assetctl.controller.v1.Query/AssetDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainletRegistryStatus(ctx context.Context, in *QueryChainletRegistryStatusRequest, opts ...grpc.CallOption) (*QueryChainletRegistryStatusResponse, error) {
	out := new(QueryChainletRegistryStatusResponse)
	err := c.cc.Invoke(ctx, "/saga.assetctl.controller.v1.Query/ChainletRegistryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/saga.assetctl.controller.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// AssetDirectory queries the list of all registered assets on the Hub.
	AssetDirectory(context.Context, *QueryAssetDirectoryRequest) (*QueryAssetDirectoryResponse, error)
	// ChainletRegistryStatus queries if the asset registry is enabled for a specific chainlet.
	ChainletRegistryStatus(context.Context, *QueryChainletRegistryStatusRequest) (*QueryChainletRegistryStatusResponse, error)
	// Params queries the controller module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AssetDirectory(ctx context.Context, req *QueryAssetDirectoryRequest) (*QueryAssetDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetDirectory not implemented")
}
func (*UnimplementedQueryServer) ChainletRegistryStatus(ctx context.Context, req *QueryChainletRegistryStatusRequest) (*QueryChainletRegistryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainletRegistryStatus not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AssetDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saga.assetctl.controller.v1.Query/AssetDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetDirectory(ctx, req.(*QueryAssetDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainletRegistryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainletRegistryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainletRegistryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saga.assetctl.controller.v1.Query/ChainletRegistryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainletRegistryStatus(ctx, req.(*QueryChainletRegistryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saga.assetctl.controller.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "saga.assetctl.controller.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssetDirectory",
			Handler:    _Query_AssetDirectory_Handler,
		},
		{
			MethodName: "ChainletRegistryStatus",
			Handler:    _Query_ChainletRegistryStatus_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saga/assetctl/controller/v1/query.proto",
}

func (m *QueryAssetDirectoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetDirectoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetDirectoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetDirectoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetDirectoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetDirectoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainletRegistryStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainletRegistryStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainletRegistryStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainletId) > 0 {
		i -= len(m.ChainletId)
		copy(dAtA[i:], m.ChainletId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainletId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainletRegistryStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainletRegistryStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainletRegistryStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisteredAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomUnits) > 0 {
		for iNdEx := len(m.DenomUnits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DenomUnits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalDenom) > 0 {
		i -= len(m.OriginalDenom)
		copy(dAtA[i:], m.OriginalDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OriginalDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAssetDirectoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetDirectoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainletRegistryStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainletId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainletRegistryStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsEnabled {
		n += 2
	}
	return n
}

func (m *RegisteredAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OriginalDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.DenomUnits) > 0 {
		for _, e := range m.DenomUnits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAssetDirectoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetDirectoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetDirectoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetDirectoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetDirectoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetDirectoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, RegisteredAsset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainletRegistryStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainletRegistryStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainletRegistryStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainletRegistryStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainletRegistryStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainletRegistryStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomUnits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomUnits = append(m.DenomUnits, DenomUnit{})
			if err := m.DenomUnits[len(m.DenomUnits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
